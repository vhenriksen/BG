//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("Model", "UserDailyReport", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(BG.Model.User), "DailyReport", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(BG.Model.DailyReport))]
[assembly: EdmRelationshipAttribute("Model", "DailyReportTask", "DailyReport", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(BG.Model.DailyReport), "Task", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(BG.Model.Task))]
[assembly: EdmRelationshipAttribute("Model", "EconomicCacheEconomicProject", "EconomicCache", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(BG.Model.EconomicCache), "EconomicProject", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(BG.Model.EconomicProject))]
[assembly: EdmRelationshipAttribute("Model", "EconomicProjectEconomicTask", "EconomicProject", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(BG.Model.EconomicProject), "EconomicTask", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(BG.Model.EconomicTaskType))]
[assembly: EdmRelationshipAttribute("Model", "EconomicTaskTask", "EconomicTask", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(BG.Model.EconomicTaskType), "Task", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(BG.Model.Task))]
[assembly: EdmRelationshipAttribute("Model", "EconomicProjectTask", "EconomicProject", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(BG.Model.EconomicProject), "Task", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(BG.Model.Task))]
[assembly: EdmRelationshipAttribute("Model", "EconomicProjectGroup", "EconomicProject", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(BG.Model.EconomicProject), "Group", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(BG.Model.Group))]
[assembly: EdmRelationshipAttribute("Model", "GroupUser", "Group", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(BG.Model.Group), "User", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(BG.Model.User))]
[assembly: EdmRelationshipAttribute("Model", "ActivityEconomicProject", "Activity", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(BG.Model.Activity), "EconomicProject", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(BG.Model.EconomicProject))]
[assembly: EdmRelationshipAttribute("Model", "ActivityRoutine", "Activity", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(BG.Model.Activity), "Routine", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(BG.Model.Routine))]
[assembly: EdmRelationshipAttribute("Model", "ActivityEconomicTaskType", "Activity", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(BG.Model.Activity), "EconomicTaskType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(BG.Model.EconomicTaskType))]
[assembly: EdmRelationshipAttribute("Model", "BreakDailyReport", "Break", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(BG.Model.Break), "DailyReport", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(BG.Model.DailyReport))]
[assembly: EdmRelationshipAttribute("Model", "RouteRoutine", "Route", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(BG.Model.Route), "Routine", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(BG.Model.Routine), true)]
[assembly: EdmRelationshipAttribute("Model", "DateRoutine", "Date", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(BG.Model.Date), "Routine", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(BG.Model.Routine))]
[assembly: EdmRelationshipAttribute("Model", "ActivityTask", "Activity", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(BG.Model.Activity), "Task", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(BG.Model.Task))]
[assembly: EdmRelationshipAttribute("Model", "UserRoutine", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(BG.Model.User), "Routine", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(BG.Model.Routine))]
[assembly: EdmRelationshipAttribute("Model", "ActivityActivityUser", "Activity", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(BG.Model.Activity), "ActivityUser", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(BG.Model.ActivityUser), true)]
[assembly: EdmRelationshipAttribute("Model", "ActivityUserActivity", "ActivityUser", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(BG.Model.ActivityUser), "Activity", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(BG.Model.Activity))]

#endregion

namespace BG.Model
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class ModelContainer : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new ModelContainer object using the connection string found in the 'ModelContainer' section of the application configuration file.
        /// </summary>
        public ModelContainer() : base("name=ModelContainer", "ModelContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new ModelContainer object.
        /// </summary>
        public ModelContainer(string connectionString) : base(connectionString, "ModelContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new ModelContainer object.
        /// </summary>
        public ModelContainer(EntityConnection connection) : base(connection, "ModelContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Task> TaskSet
        {
            get
            {
                if ((_TaskSet == null))
                {
                    _TaskSet = base.CreateObjectSet<Task>("TaskSet");
                }
                return _TaskSet;
            }
        }
        private ObjectSet<Task> _TaskSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<DailyReport> DailyReportSet
        {
            get
            {
                if ((_DailyReportSet == null))
                {
                    _DailyReportSet = base.CreateObjectSet<DailyReport>("DailyReportSet");
                }
                return _DailyReportSet;
            }
        }
        private ObjectSet<DailyReport> _DailyReportSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<EconomicCache> EconomicCacheSet
        {
            get
            {
                if ((_EconomicCacheSet == null))
                {
                    _EconomicCacheSet = base.CreateObjectSet<EconomicCache>("EconomicCacheSet");
                }
                return _EconomicCacheSet;
            }
        }
        private ObjectSet<EconomicCache> _EconomicCacheSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<EconomicProject> EconomicProjectSet
        {
            get
            {
                if ((_EconomicProjectSet == null))
                {
                    _EconomicProjectSet = base.CreateObjectSet<EconomicProject>("EconomicProjectSet");
                }
                return _EconomicProjectSet;
            }
        }
        private ObjectSet<EconomicProject> _EconomicProjectSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<EconomicTaskType> EconomicTaskTypeSet
        {
            get
            {
                if ((_EconomicTaskTypeSet == null))
                {
                    _EconomicTaskTypeSet = base.CreateObjectSet<EconomicTaskType>("EconomicTaskTypeSet");
                }
                return _EconomicTaskTypeSet;
            }
        }
        private ObjectSet<EconomicTaskType> _EconomicTaskTypeSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<User> UserSet
        {
            get
            {
                if ((_UserSet == null))
                {
                    _UserSet = base.CreateObjectSet<User>("UserSet");
                }
                return _UserSet;
            }
        }
        private ObjectSet<User> _UserSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Group> GroupSet
        {
            get
            {
                if ((_GroupSet == null))
                {
                    _GroupSet = base.CreateObjectSet<Group>("GroupSet");
                }
                return _GroupSet;
            }
        }
        private ObjectSet<Group> _GroupSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Routine> RoutineSet
        {
            get
            {
                if ((_RoutineSet == null))
                {
                    _RoutineSet = base.CreateObjectSet<Routine>("RoutineSet");
                }
                return _RoutineSet;
            }
        }
        private ObjectSet<Routine> _RoutineSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Activity> ActivitySet
        {
            get
            {
                if ((_ActivitySet == null))
                {
                    _ActivitySet = base.CreateObjectSet<Activity>("ActivitySet");
                }
                return _ActivitySet;
            }
        }
        private ObjectSet<Activity> _ActivitySet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Break> BreakSet
        {
            get
            {
                if ((_BreakSet == null))
                {
                    _BreakSet = base.CreateObjectSet<Break>("BreakSet");
                }
                return _BreakSet;
            }
        }
        private ObjectSet<Break> _BreakSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Route> RouteSet
        {
            get
            {
                if ((_RouteSet == null))
                {
                    _RouteSet = base.CreateObjectSet<Route>("RouteSet");
                }
                return _RouteSet;
            }
        }
        private ObjectSet<Route> _RouteSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Date> DateSet
        {
            get
            {
                if ((_DateSet == null))
                {
                    _DateSet = base.CreateObjectSet<Date>("DateSet");
                }
                return _DateSet;
            }
        }
        private ObjectSet<Date> _DateSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ActivityUser> ActivityUserSet
        {
            get
            {
                if ((_ActivityUserSet == null))
                {
                    _ActivityUserSet = base.CreateObjectSet<ActivityUser>("ActivityUserSet");
                }
                return _ActivityUserSet;
            }
        }
        private ObjectSet<ActivityUser> _ActivityUserSet;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TaskSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTaskSet(Task task)
        {
            base.AddObject("TaskSet", task);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the DailyReportSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDailyReportSet(DailyReport dailyReport)
        {
            base.AddObject("DailyReportSet", dailyReport);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the EconomicCacheSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToEconomicCacheSet(EconomicCache economicCache)
        {
            base.AddObject("EconomicCacheSet", economicCache);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the EconomicProjectSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToEconomicProjectSet(EconomicProject economicProject)
        {
            base.AddObject("EconomicProjectSet", economicProject);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the EconomicTaskTypeSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToEconomicTaskTypeSet(EconomicTaskType economicTaskType)
        {
            base.AddObject("EconomicTaskTypeSet", economicTaskType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UserSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUserSet(User user)
        {
            base.AddObject("UserSet", user);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the GroupSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGroupSet(Group group)
        {
            base.AddObject("GroupSet", group);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RoutineSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRoutineSet(Routine routine)
        {
            base.AddObject("RoutineSet", routine);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ActivitySet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToActivitySet(Activity activity)
        {
            base.AddObject("ActivitySet", activity);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the BreakSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToBreakSet(Break @break)
        {
            base.AddObject("BreakSet", @break);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RouteSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRouteSet(Route route)
        {
            base.AddObject("RouteSet", route);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the DateSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDateSet(Date date)
        {
            base.AddObject("DateSet", date);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ActivityUserSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToActivityUserSet(ActivityUser activityUser)
        {
            base.AddObject("ActivityUserSet", activityUser);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="Activity")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Activity : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Activity object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="minutes">Initial value of the Minutes property.</param>
        /// <param name="isUsed">Initial value of the IsUsed property.</param>
        public static Activity CreateActivity(global::System.Int32 id, global::System.Double minutes, global::System.Boolean isUsed)
        {
            Activity activity = new Activity();
            activity.Id = id;
            activity.Minutes = minutes;
            activity.IsUsed = isUsed;
            return activity;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Minutes
        {
            get
            {
                return _Minutes;
            }
            set
            {
                OnMinutesChanging(value);
                ReportPropertyChanging("Minutes");
                _Minutes = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Minutes");
                OnMinutesChanged();
            }
        }
        private global::System.Double _Minutes;
        partial void OnMinutesChanging(global::System.Double value);
        partial void OnMinutesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ActivityTaken
        {
            get
            {
                return _ActivityTaken;
            }
            set
            {
                OnActivityTakenChanging(value);
                ReportPropertyChanging("ActivityTaken");
                _ActivityTaken = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ActivityTaken");
                OnActivityTakenChanged();
            }
        }
        private Nullable<global::System.DateTime> _ActivityTaken;
        partial void OnActivityTakenChanging(Nullable<global::System.DateTime> value);
        partial void OnActivityTakenChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsUsed
        {
            get
            {
                return _IsUsed;
            }
            set
            {
                OnIsUsedChanging(value);
                ReportPropertyChanging("IsUsed");
                _IsUsed = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsUsed");
                OnIsUsedChanged();
            }
        }
        private global::System.Boolean _IsUsed;
        partial void OnIsUsedChanging(global::System.Boolean value);
        partial void OnIsUsedChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "ActivityEconomicProject", "EconomicProject")]
        public EconomicProject EconomicProject
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EconomicProject>("Model.ActivityEconomicProject", "EconomicProject").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EconomicProject>("Model.ActivityEconomicProject", "EconomicProject").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<EconomicProject> EconomicProjectReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EconomicProject>("Model.ActivityEconomicProject", "EconomicProject");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<EconomicProject>("Model.ActivityEconomicProject", "EconomicProject", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "ActivityRoutine", "Routine")]
        public Routine Routine
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Routine>("Model.ActivityRoutine", "Routine").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Routine>("Model.ActivityRoutine", "Routine").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Routine> RoutineReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Routine>("Model.ActivityRoutine", "Routine");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Routine>("Model.ActivityRoutine", "Routine", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "ActivityEconomicTaskType", "EconomicTaskType")]
        public EconomicTaskType EconomicTaskType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EconomicTaskType>("Model.ActivityEconomicTaskType", "EconomicTaskType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EconomicTaskType>("Model.ActivityEconomicTaskType", "EconomicTaskType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<EconomicTaskType> EconomicTaskTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EconomicTaskType>("Model.ActivityEconomicTaskType", "EconomicTaskType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<EconomicTaskType>("Model.ActivityEconomicTaskType", "EconomicTaskType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "ActivityTask", "Task")]
        public Task Task
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Task>("Model.ActivityTask", "Task").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Task>("Model.ActivityTask", "Task").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Task> TaskReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Task>("Model.ActivityTask", "Task");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Task>("Model.ActivityTask", "Task", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "ActivityActivityUser", "ActivityUser")]
        public EntityCollection<ActivityUser> ActivityUser
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ActivityUser>("Model.ActivityActivityUser", "ActivityUser");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ActivityUser>("Model.ActivityActivityUser", "ActivityUser", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "ActivityUserActivity", "ActivityUser")]
        public ActivityUser TakenBy
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ActivityUser>("Model.ActivityUserActivity", "ActivityUser").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ActivityUser>("Model.ActivityUserActivity", "ActivityUser").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ActivityUser> TakenByReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ActivityUser>("Model.ActivityUserActivity", "ActivityUser");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ActivityUser>("Model.ActivityUserActivity", "ActivityUser", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="ActivityUser")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ActivityUser : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ActivityUser object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="activityId">Initial value of the ActivityId property.</param>
        /// <param name="userId">Initial value of the UserId property.</param>
        public static ActivityUser CreateActivityUser(global::System.Int32 id, global::System.Int32 activityId, global::System.Int32 userId)
        {
            ActivityUser activityUser = new ActivityUser();
            activityUser.Id = id;
            activityUser.ActivityId = activityId;
            activityUser.UserId = userId;
            return activityUser;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ActivityId
        {
            get
            {
                return _ActivityId;
            }
            set
            {
                OnActivityIdChanging(value);
                ReportPropertyChanging("ActivityId");
                _ActivityId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ActivityId");
                OnActivityIdChanged();
            }
        }
        private global::System.Int32 _ActivityId;
        partial void OnActivityIdChanging(global::System.Int32 value);
        partial void OnActivityIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                OnUserIdChanging(value);
                ReportPropertyChanging("UserId");
                _UserId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserId");
                OnUserIdChanged();
            }
        }
        private global::System.Int32 _UserId;
        partial void OnUserIdChanging(global::System.Int32 value);
        partial void OnUserIdChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "ActivityActivityUser", "Activity")]
        public Activity Activities
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Activity>("Model.ActivityActivityUser", "Activity").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Activity>("Model.ActivityActivityUser", "Activity").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Activity> ActivitiesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Activity>("Model.ActivityActivityUser", "Activity");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Activity>("Model.ActivityActivityUser", "Activity", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "ActivityUserActivity", "Activity")]
        public Activity Activity
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Activity>("Model.ActivityUserActivity", "Activity").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Activity>("Model.ActivityUserActivity", "Activity").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Activity> ActivityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Activity>("Model.ActivityUserActivity", "Activity");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Activity>("Model.ActivityUserActivity", "Activity", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="Break")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Break : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Break object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        public static Break CreateBreak(global::System.Int32 id)
        {
            Break @break = new Break();
            @break.Id = id;
            return @break;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> BreakStarted
        {
            get
            {
                return _BreakStarted;
            }
            set
            {
                OnBreakStartedChanging(value);
                ReportPropertyChanging("BreakStarted");
                _BreakStarted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BreakStarted");
                OnBreakStartedChanged();
            }
        }
        private Nullable<global::System.DateTime> _BreakStarted;
        partial void OnBreakStartedChanging(Nullable<global::System.DateTime> value);
        partial void OnBreakStartedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> BreakEnded
        {
            get
            {
                return _BreakEnded;
            }
            set
            {
                OnBreakEndedChanging(value);
                ReportPropertyChanging("BreakEnded");
                _BreakEnded = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BreakEnded");
                OnBreakEndedChanged();
            }
        }
        private Nullable<global::System.DateTime> _BreakEnded;
        partial void OnBreakEndedChanging(Nullable<global::System.DateTime> value);
        partial void OnBreakEndedChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "BreakDailyReport", "DailyReport")]
        public DailyReport DailyReport
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DailyReport>("Model.BreakDailyReport", "DailyReport").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DailyReport>("Model.BreakDailyReport", "DailyReport").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DailyReport> DailyReportReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DailyReport>("Model.BreakDailyReport", "DailyReport");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<DailyReport>("Model.BreakDailyReport", "DailyReport", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="DailyReport")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DailyReport : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new DailyReport object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        public static DailyReport CreateDailyReport(global::System.Int32 id)
        {
            DailyReport dailyReport = new DailyReport();
            dailyReport.Id = id;
            return dailyReport;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DayEnded
        {
            get
            {
                return _DayEnded;
            }
            set
            {
                OnDayEndedChanging(value);
                ReportPropertyChanging("DayEnded");
                _DayEnded = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DayEnded");
                OnDayEndedChanged();
            }
        }
        private Nullable<global::System.DateTime> _DayEnded;
        partial void OnDayEndedChanging(Nullable<global::System.DateTime> value);
        partial void OnDayEndedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DayStarted
        {
            get
            {
                return _DayStarted;
            }
            set
            {
                OnDayStartedChanging(value);
                ReportPropertyChanging("DayStarted");
                _DayStarted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DayStarted");
                OnDayStartedChanged();
            }
        }
        private Nullable<global::System.DateTime> _DayStarted;
        partial void OnDayStartedChanging(Nullable<global::System.DateTime> value);
        partial void OnDayStartedChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "UserDailyReport", "User")]
        private User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Model.UserDailyReport", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Model.UserDailyReport", "User").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        private EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Model.UserDailyReport", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("Model.UserDailyReport", "User", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "DailyReportTask", "Task")]
        public EntityCollection<Task> Task
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Task>("Model.DailyReportTask", "Task");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Task>("Model.DailyReportTask", "Task", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "BreakDailyReport", "Break")]
        public Break Break
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Break>("Model.BreakDailyReport", "Break").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Break>("Model.BreakDailyReport", "Break").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Break> BreakReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Break>("Model.BreakDailyReport", "Break");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Break>("Model.BreakDailyReport", "Break", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="Date")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Date : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Date object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="theDate">Initial value of the TheDate property.</param>
        public static Date CreateDate(global::System.Int32 id, global::System.DateTime theDate)
        {
            Date date = new Date();
            date.Id = id;
            date.TheDate = theDate;
            return date;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime TheDate
        {
            get
            {
                return _TheDate;
            }
            set
            {
                OnTheDateChanging(value);
                ReportPropertyChanging("TheDate");
                _TheDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TheDate");
                OnTheDateChanged();
            }
        }
        private global::System.DateTime _TheDate;
        partial void OnTheDateChanging(global::System.DateTime value);
        partial void OnTheDateChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "DateRoutine", "Routine")]
        public EntityCollection<Routine> Routines
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Routine>("Model.DateRoutine", "Routine");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Routine>("Model.DateRoutine", "Routine", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="EconomicCache")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class EconomicCache : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new EconomicCache object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="lastUpdated">Initial value of the LastUpdated property.</param>
        public static EconomicCache CreateEconomicCache(global::System.Int32 id, global::System.DateTime lastUpdated)
        {
            EconomicCache economicCache = new EconomicCache();
            economicCache.Id = id;
            economicCache.LastUpdated = lastUpdated;
            return economicCache;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime LastUpdated
        {
            get
            {
                return _LastUpdated;
            }
            set
            {
                OnLastUpdatedChanging(value);
                ReportPropertyChanging("LastUpdated");
                _LastUpdated = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LastUpdated");
                OnLastUpdatedChanged();
            }
        }
        private global::System.DateTime _LastUpdated;
        partial void OnLastUpdatedChanging(global::System.DateTime value);
        partial void OnLastUpdatedChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "EconomicCacheEconomicProject", "EconomicProject")]
        public EntityCollection<EconomicProject> EconomicProject
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<EconomicProject>("Model.EconomicCacheEconomicProject", "EconomicProject");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<EconomicProject>("Model.EconomicCacheEconomicProject", "EconomicProject", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="EconomicProject")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class EconomicProject : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new EconomicProject object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="economicProjectId">Initial value of the EconomicProjectId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static EconomicProject CreateEconomicProject(global::System.Int32 id, global::System.Int32 economicProjectId, global::System.String name)
        {
            EconomicProject economicProject = new EconomicProject();
            economicProject.Id = id;
            economicProject.EconomicProjectId = economicProjectId;
            economicProject.Name = name;
            return economicProject;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 EconomicProjectId
        {
            get
            {
                return _EconomicProjectId;
            }
            set
            {
                OnEconomicProjectIdChanging(value);
                ReportPropertyChanging("EconomicProjectId");
                _EconomicProjectId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EconomicProjectId");
                OnEconomicProjectIdChanged();
            }
        }
        private global::System.Int32 _EconomicProjectId;
        partial void OnEconomicProjectIdChanging(global::System.Int32 value);
        partial void OnEconomicProjectIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "EconomicCacheEconomicProject", "EconomicCache")]
        public EconomicCache EconomicCache
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EconomicCache>("Model.EconomicCacheEconomicProject", "EconomicCache").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EconomicCache>("Model.EconomicCacheEconomicProject", "EconomicCache").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<EconomicCache> EconomicCacheReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EconomicCache>("Model.EconomicCacheEconomicProject", "EconomicCache");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<EconomicCache>("Model.EconomicCacheEconomicProject", "EconomicCache", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "EconomicProjectEconomicTask", "EconomicTask")]
        public EntityCollection<EconomicTaskType> EconomicTaskTypes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<EconomicTaskType>("Model.EconomicProjectEconomicTask", "EconomicTask");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<EconomicTaskType>("Model.EconomicProjectEconomicTask", "EconomicTask", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "EconomicProjectTask", "Task")]
        private EntityCollection<Task> Task
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Task>("Model.EconomicProjectTask", "Task");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Task>("Model.EconomicProjectTask", "Task", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "EconomicProjectGroup", "Group")]
        public Group Group
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Group>("Model.EconomicProjectGroup", "Group").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Group>("Model.EconomicProjectGroup", "Group").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Group> GroupReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Group>("Model.EconomicProjectGroup", "Group");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Group>("Model.EconomicProjectGroup", "Group", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "ActivityEconomicProject", "Activity")]
        public EntityCollection<Activity> Activities
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Activity>("Model.ActivityEconomicProject", "Activity");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Activity>("Model.ActivityEconomicProject", "Activity", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="EconomicTaskType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class EconomicTaskType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new EconomicTaskType object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="economicTaskTypeId">Initial value of the EconomicTaskTypeId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static EconomicTaskType CreateEconomicTaskType(global::System.Int32 id, global::System.Int32 economicTaskTypeId, global::System.String name)
        {
            EconomicTaskType economicTaskType = new EconomicTaskType();
            economicTaskType.Id = id;
            economicTaskType.EconomicTaskTypeId = economicTaskTypeId;
            economicTaskType.Name = name;
            return economicTaskType;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 EconomicTaskTypeId
        {
            get
            {
                return _EconomicTaskTypeId;
            }
            set
            {
                if (_EconomicTaskTypeId != value)
                {
                    OnEconomicTaskTypeIdChanging(value);
                    ReportPropertyChanging("EconomicTaskTypeId");
                    _EconomicTaskTypeId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("EconomicTaskTypeId");
                    OnEconomicTaskTypeIdChanged();
                }
            }
        }
        private global::System.Int32 _EconomicTaskTypeId;
        partial void OnEconomicTaskTypeIdChanging(global::System.Int32 value);
        partial void OnEconomicTaskTypeIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "EconomicProjectEconomicTask", "EconomicProject")]
        public EntityCollection<EconomicProject> EconomicProject
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<EconomicProject>("Model.EconomicProjectEconomicTask", "EconomicProject");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<EconomicProject>("Model.EconomicProjectEconomicTask", "EconomicProject", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "EconomicTaskTask", "Task")]
        public EntityCollection<Task> Task
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Task>("Model.EconomicTaskTask", "Task");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Task>("Model.EconomicTaskTask", "Task", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "ActivityEconomicTaskType", "Activity")]
        public EntityCollection<Activity> Activities
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Activity>("Model.ActivityEconomicTaskType", "Activity");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Activity>("Model.ActivityEconomicTaskType", "Activity", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="Group")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Group : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Group object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="economicGroupNumber">Initial value of the EconomicGroupNumber property.</param>
        public static Group CreateGroup(global::System.Int32 id, global::System.String name, global::System.Int32 economicGroupNumber)
        {
            Group group = new Group();
            group.Id = id;
            group.Name = name;
            group.EconomicGroupNumber = economicGroupNumber;
            return group;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 EconomicGroupNumber
        {
            get
            {
                return _EconomicGroupNumber;
            }
            set
            {
                OnEconomicGroupNumberChanging(value);
                ReportPropertyChanging("EconomicGroupNumber");
                _EconomicGroupNumber = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EconomicGroupNumber");
                OnEconomicGroupNumberChanged();
            }
        }
        private global::System.Int32 _EconomicGroupNumber;
        partial void OnEconomicGroupNumberChanging(global::System.Int32 value);
        partial void OnEconomicGroupNumberChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "EconomicProjectGroup", "EconomicProject")]
        public EntityCollection<EconomicProject> EconomicProject
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<EconomicProject>("Model.EconomicProjectGroup", "EconomicProject");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<EconomicProject>("Model.EconomicProjectGroup", "EconomicProject", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "GroupUser", "User")]
        public EntityCollection<User> User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<User>("Model.GroupUser", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<User>("Model.GroupUser", "User", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="Route")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Route : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Route object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Route CreateRoute(global::System.Int32 id, global::System.String name)
        {
            Route route = new Route();
            route.Id = id;
            route.Name = name;
            return route;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "RouteRoutine", "Routine")]
        public EntityCollection<Routine> Routines
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Routine>("Model.RouteRoutine", "Routine");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Routine>("Model.RouteRoutine", "Routine", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="Routine")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Routine : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Routine object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="routeId">Initial value of the RouteId property.</param>
        public static Routine CreateRoutine(global::System.Int32 id, global::System.String name, global::System.Int32 routeId)
        {
            Routine routine = new Routine();
            routine.Id = id;
            routine.Name = name;
            routine.RouteId = routeId;
            return routine;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RouteId
        {
            get
            {
                return _RouteId;
            }
            set
            {
                OnRouteIdChanging(value);
                ReportPropertyChanging("RouteId");
                _RouteId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RouteId");
                OnRouteIdChanged();
            }
        }
        private global::System.Int32 _RouteId;
        partial void OnRouteIdChanging(global::System.Int32 value);
        partial void OnRouteIdChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "ActivityRoutine", "Activity")]
        public EntityCollection<Activity> Activities
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Activity>("Model.ActivityRoutine", "Activity");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Activity>("Model.ActivityRoutine", "Activity", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "RouteRoutine", "Route")]
        public Route Route
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Route>("Model.RouteRoutine", "Route").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Route>("Model.RouteRoutine", "Route").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Route> RouteReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Route>("Model.RouteRoutine", "Route");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Route>("Model.RouteRoutine", "Route", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "DateRoutine", "Date")]
        public EntityCollection<Date> Dates
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Date>("Model.DateRoutine", "Date");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Date>("Model.DateRoutine", "Date", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "UserRoutine", "User")]
        public EntityCollection<User> Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<User>("Model.UserRoutine", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<User>("Model.UserRoutine", "User", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="Task")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Task : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Task object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="isEmailed">Initial value of the isEmailed property.</param>
        public static Task CreateTask(global::System.Int32 id, global::System.Boolean isEmailed)
        {
            Task task = new Task();
            task.Id = id;
            task.isEmailed = isEmailed;
            return task;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> TimeEnded
        {
            get
            {
                return _TimeEnded;
            }
            set
            {
                OnTimeEndedChanging(value);
                ReportPropertyChanging("TimeEnded");
                _TimeEnded = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TimeEnded");
                OnTimeEndedChanged();
            }
        }
        private Nullable<global::System.DateTime> _TimeEnded;
        partial void OnTimeEndedChanging(Nullable<global::System.DateTime> value);
        partial void OnTimeEndedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> TimeStarted
        {
            get
            {
                return _TimeStarted;
            }
            set
            {
                OnTimeStartedChanging(value);
                ReportPropertyChanging("TimeStarted");
                _TimeStarted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TimeStarted");
                OnTimeStartedChanged();
            }
        }
        private Nullable<global::System.DateTime> _TimeStarted;
        partial void OnTimeStartedChanging(Nullable<global::System.DateTime> value);
        partial void OnTimeStartedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean isEmailed
        {
            get
            {
                return _isEmailed;
            }
            set
            {
                OnisEmailedChanging(value);
                ReportPropertyChanging("isEmailed");
                _isEmailed = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("isEmailed");
                OnisEmailedChanged();
            }
        }
        private global::System.Boolean _isEmailed;
        partial void OnisEmailedChanging(global::System.Boolean value);
        partial void OnisEmailedChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "DailyReportTask", "DailyReport")]
        private DailyReport DailyReport
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DailyReport>("Model.DailyReportTask", "DailyReport").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DailyReport>("Model.DailyReportTask", "DailyReport").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        private EntityReference<DailyReport> DailyReportReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DailyReport>("Model.DailyReportTask", "DailyReport");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<DailyReport>("Model.DailyReportTask", "DailyReport", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "EconomicTaskTask", "EconomicTask")]
        public EconomicTaskType EconomicTask
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EconomicTaskType>("Model.EconomicTaskTask", "EconomicTask").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EconomicTaskType>("Model.EconomicTaskTask", "EconomicTask").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<EconomicTaskType> EconomicTaskReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EconomicTaskType>("Model.EconomicTaskTask", "EconomicTask");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<EconomicTaskType>("Model.EconomicTaskTask", "EconomicTask", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "EconomicProjectTask", "EconomicProject")]
        public EconomicProject EconomicProject
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EconomicProject>("Model.EconomicProjectTask", "EconomicProject").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EconomicProject>("Model.EconomicProjectTask", "EconomicProject").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<EconomicProject> EconomicProjectReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EconomicProject>("Model.EconomicProjectTask", "EconomicProject");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<EconomicProject>("Model.EconomicProjectTask", "EconomicProject", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "ActivityTask", "Activity")]
        public Activity Activity
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Activity>("Model.ActivityTask", "Activity").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Activity>("Model.ActivityTask", "Activity").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Activity> ActivityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Activity>("Model.ActivityTask", "Activity");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Activity>("Model.ActivityTask", "Activity", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="User")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class User : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new User object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="economicUserId">Initial value of the EconomicUserId property.</param>
        /// <param name="username">Initial value of the Username property.</param>
        /// <param name="password">Initial value of the Password property.</param>
        /// <param name="isAdmin">Initial value of the IsAdmin property.</param>
        public static User CreateUser(global::System.Int32 id, global::System.Int32 economicUserId, global::System.String username, global::System.String password, global::System.Boolean isAdmin)
        {
            User user = new User();
            user.Id = id;
            user.EconomicUserId = economicUserId;
            user.Username = username;
            user.Password = password;
            user.IsAdmin = isAdmin;
            return user;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 EconomicUserId
        {
            get
            {
                return _EconomicUserId;
            }
            set
            {
                OnEconomicUserIdChanging(value);
                ReportPropertyChanging("EconomicUserId");
                _EconomicUserId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EconomicUserId");
                OnEconomicUserIdChanged();
            }
        }
        private global::System.Int32 _EconomicUserId;
        partial void OnEconomicUserIdChanging(global::System.Int32 value);
        partial void OnEconomicUserIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Username
        {
            get
            {
                return _Username;
            }
            set
            {
                OnUsernameChanging(value);
                ReportPropertyChanging("Username");
                _Username = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Username");
                OnUsernameChanged();
            }
        }
        private global::System.String _Username;
        partial void OnUsernameChanging(global::System.String value);
        partial void OnUsernameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Password
        {
            get
            {
                return _Password;
            }
            set
            {
                OnPasswordChanging(value);
                ReportPropertyChanging("Password");
                _Password = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Password");
                OnPasswordChanged();
            }
        }
        private global::System.String _Password;
        partial void OnPasswordChanging(global::System.String value);
        partial void OnPasswordChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsAdmin
        {
            get
            {
                return _IsAdmin;
            }
            set
            {
                OnIsAdminChanging(value);
                ReportPropertyChanging("IsAdmin");
                _IsAdmin = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsAdmin");
                OnIsAdminChanged();
            }
        }
        private global::System.Boolean _IsAdmin;
        partial void OnIsAdminChanging(global::System.Boolean value);
        partial void OnIsAdminChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "UserDailyReport", "DailyReport")]
        public EntityCollection<DailyReport> DailyReport
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<DailyReport>("Model.UserDailyReport", "DailyReport");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<DailyReport>("Model.UserDailyReport", "DailyReport", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "GroupUser", "Group")]
        public EntityCollection<Group> Group
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Group>("Model.GroupUser", "Group");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Group>("Model.GroupUser", "Group", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "UserRoutine", "Routine")]
        public EntityCollection<Routine> Routines
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Routine>("Model.UserRoutine", "Routine");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Routine>("Model.UserRoutine", "Routine", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
